x <- stats::runif(12); y <- stats::rnorm(12)
i <- order(x, y); x <- x[i]; y <- y[i]
plot(x,y, main = "arrows(.) and segments(.)")
## draw arrows from point to point :
s <- seq(length(x)-1)  # one shorter than data
s
arrows(x[s], y[s], x[s+1], y[s+1], col = 1:3)
s <- s[-length(s)]
segments(x[s], y[s], x[s+2], y[s+2], col = "pink")
testdata=data.frame(R1=c(0,5,3,2,4),R2=c(1,7,3,2.8,6))
testdata
o=c(1,5,3,4,2) # the rows in increasing order
o
?bxp9
?bxp()
data.matrix(testdata[o,])
rep(1,ncol(testdata))
bxp.data=list(stats=data.matrix(testdata[o,]),n=rep(1,ncol(testdata)))
# the n=... parameter doesn't affect the plot, but it still needs to be there
bxp(bxp.data)
install.packages("sf")
# Mettre a jour et installer les packages necessaire pour la formation
update.packages(ask = FALSE)
pack <- c("sf", "terra", "spData", "httr", "tidyverse", "sp", "rgdal", "raster", "ggplot2",
"viridis", "rasterVis", "tmap", "stars", "ggpubr", "mapview", "landscapemetrics",
"landscapetools","rgeos","spdep","gstat", "dismo","patchwork","CoordinateCleaner",
"automap","tigris","spocc","ggthemes","gdistance","moveVis","move", "gganimate",
"gifski","adehabitatLT", "sftrack", "amt", "rgbif","tidyr","osmdata","units",
"ggmap","ggspatial","elevatr")
new.packages <- pack[!(pack %in% installed.packages()[,"Package"])]
new.packages
if(length(new.packages)) install.packages(new.packages)
new.packages <- pack[!(pack %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
install.packages("spDataLarge", repos = "https://nowosad.r-universe.dev")
new.packages <- pack[!(pack %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
if(length(new.packages)) install.packages(new.packages)
new.packages <- pack[!(pack %in% installed.packages()[,"Package"])]
new.packages
if(length(new.packages)) install.packages(new.packages)
# Mettre a jour et installer les packages necessaire pour la formation
update.packages(ask = FALSE)
"viridis", "rasterVis", "tmap", "stars", "ggpubr", "mapview", "landscapemetrics",
"landscapetools","rgeos","spdep","gstat", "dismo","patchwork","CoordinateCleaner",
"automap","tigris","spocc","ggthemes","gdistance","moveVis","move", "gganimate",
"gifski","adehabitatLT", "sftrack", "amt", "rgbif","tidyr","osmdata","units",
"ggmap","ggspatial","elevatr")
new.packages <- pack[!(pack %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
new.packages
pack <- c("sf", "terra", "spData", "httr", "tidyverse", "sp", "rgdal", "raster", "ggplot2",
"viridis", "rasterVis", "tmap", "stars", "ggpubr", "mapview", "landscapemetrics",
"landscapetools","rgeos","spdep","gstat", "dismo","patchwork","CoordinateCleaner",
"automap","tigris","spocc","ggthemes","gdistance","moveVis","move", "gganimate",
"gifski","adehabitatLT", "sftrack", "amt", "rgbif","tidyr","osmdata","units",
"ggmap","ggspatial","elevatr")
new.packages <- pack[!(pack %in% installed.packages()[,"Package"])]
new.packages
if(length(new.packages)) install.packages(new.packages)
install.packages(new.packages)
new.packages <- pack[!(pack %in% installed.packages()[,"Package"])]
new.packages
install.packages("stars")
install.packages("stars")
new.packages
library("stars")
install.packages("stars")
install.packages('stars')
install.packages("stars")
library(gdistance)
# Avec cette methode, il y a un parametre theta qui nous permet de dire si on doit
# avoir des mouvements plus "omniscients" ou "random walk"
library(tigris);library(tidyverse);library(spocc);library(raster);library(terra)
# On va ouvrir un raster
asp <- readRDS("Connectivite/asp.rds")
pack <- c("sf", "terra", "spData", "httr", "tidyverse", "sp", "rgdal", "raster", "ggplot2",
"viridis", "rasterVis", "tmap", "stars", "ggpubr", "mapview", "landscapemetrics",
"landscapetools","rgeos","spdep","gstat", "dismo","patchwork","CoordinateCleaner",
"automap","tigris","spocc","ggthemes","gdistance","moveVis","move", "gganimate",
"gifski","adehabitatLT", "sftrack", "amt", "rgbif","tidyr","osmdata","units",
"ggmap","ggspatial","elevatr")
new.packages <- pack[!(pack %in% installed.packages()[,"Package"])]
new.packages
if(length(new.packages)) install.packages(new.packages)
1
new.packages <- pack[!(pack %in% installed.packages()[,"Package"])]
new.packages
library(stars)
library(gdistance)
install.packages("spDataLarge", repos = "https://nowosad.r-universe.dev")
4,184*590
4.184*590
0.6857111111*1,028
0.6857111111*1.028
6378^2*4*pi
6378^2*4*pi*0,728
6378^2*4*pi*0.728
6378^2*4*pi*0.728*3800
6378^2*4*pi*0.728*3800*1,028*1000
6378^2*4*pi*0.728*3800*1.028*1000
4.19*96.6
6378^2*4*pi*0.728*3800*1.028*1000*404.754
6378^2*4*pi*0.728*3800*1.028*1000*404.754
6378^2*4*pi*0.728*3800*1.028*1000*404.754/3600
6378^2*4*pi*0.728*3800*1.028
6378^2*4*pi*0.728*3800*10^9
6378^2*4*pi*0.728*3800*10^9*1.028
6378^2*4*pi*0.728*3800*10^9*1.028*4,19*96.6
6378^2*4*pi*0.728*3800*10^9*1.028*4.19*96.6
342*3600
moy <- 10 # moyenne de la population.
std <- 3 # écart-type de la population.
dnorm(x,moy,std)
dnorm(1,moy,std)
dnorm(30,moy,std)
plot(function(x) dnorm(x,moy,std),  moy-4*std, moy+4*std,main = "",lwd=3,xlab="Taille des pièces (en mm)",ylab="Fréquence")
plot(function(x) dnorm(x,moy,std),  moy-4*std, moy+4*std,main = "",lwd=5,xlab="Taille des pièces (en mm)",ylab="Fréquence")
plot(function(x) dnorm(x,moy,std),  moy-4*std, moy+4*std,main = "",lwd=10,xlab="Taille des pièces (en mm)",ylab="Fréquence")
plot(function(x) dnorm(x,moy,std),  moy-4*std, moy+4*std,main = "",lwd=20,xlab="Taille des pièces (en mm)",ylab="Fréquence")
rm(list=ls())
library(tidyverse) #manipulation de donnees
library(osmdata) #API openstreetmap
library(sf)
library(ggmap)
library(showtext) # for custom fonts
library(mapview) #pour visualisation directe, tranquilou
library(osmextract)
library(data.table) #pour selectionner des variables basees sur des mots
zone = c(-76.9, 44.6, -68.9, 50.6)
lonmin = -71.75
lonmax = -70.8
latmin = 46.5
latmax = 48.5
eau = oe_get(
"Quebec",
layer = "multipolygons",
quiet = FALSE,
query = "SELECT * FROM 'multipolygons' WHERE natural = 'water'"
)
lacs = eau[eau$other_tags %like% "lake", ,]
laurent = eau[eau$name %like% "estuary", ,]
laurent = eau[eau$name %like% "fleuve", ,]
laurent = eau[eau$name %like% "river", ,]
laurent = eau[eau$other_tags %like% "river", ,]
#### packages, data, pré-visualisation ####
library(ggplot2) #graphiques stylés
1
#données monde, pour avoir les frontières :
world <- map_data("world")
library(sf)
library(sfheaders)
nouv <- sfheaders::sf_polygon(
obj = world
, x = "long"
, y = "lat"
, polygon_id = "group"
)
sf::st_crs( nouv ) <- 26918
typeof(nouv)
library(tidyverse) #manipulation de données
polygon <- world %>%
st_as_sf(coords = c("long", "lat"), crs = utm18) %>%
group_by(group) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("POLYGON")
?st_as_sf
polygon <- world %>%
st_as_sf(coords = c("long", "lat"), crs = st_crs(4326)) %>%
group_by(group) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("POLYGON")
typeof(polygon)
ggplot() +
geom_sf(data = polygon,
inherit.aes = FALSE,
color = "steelblue",
size = .8) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
ggplot() +
geom_sf(data = polygon,
inherit.aes = FALSE,
fill = "steelblue",
size = .8) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
?st_simplify
unigone = st_simplify(polygon, preserveTopology = T, dTolerance = 2000)
ggplot() +
geom_sf(data = unigone,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
ggplot() +
geom_sf(data = polygon,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
unigone = st_simplify(polygon, preserveTopology = T, dTolerance = 500)
ggplot() +
geom_sf(data = unigone,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
unigone = st_simplify(polygon, preserveTopology = T, dTolerance = 5)
ggplot() +
geom_sf(data = unigone,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
unigone = st_simplify(polygon, preserveTopology = T, dTolerance = 50000)
ggplot() +
geom_sf(data = unigone,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
unigone = st_simplify(polygon, preserveTopology = T, dTolerance = 5000)
ggplot() +
geom_sf(data = unigone,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
ggplot() +
geom_sf(data = polygon,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
unigone = st_simplify(polygon, preserveTopology = T, dTolerance = 9000)
ggplot() +
geom_sf(data = unigone,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
ggplot() +
geom_sf(data = polygon,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
unigone = st_simplify(polygon, preserveTopology = T, dTolerance = 20000)
ggplot() +
geom_sf(data = polygon,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
ggplot() +
geom_sf(data = unigone,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
unigone = st_simplify(polygon, preserveTopology = T, dTolerance = 20000,
joinStyle = 'ROUND' )
unigone = st_simplify(polygon, preserveTopology = T, dTolerance = 20000)
ggplot() +
geom_sf(data = unigone,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
unigone = st_simplify(polygon, preserveTopology = F, dTolerance = 20000)
ggplot() +
geom_sf(data = unigone,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
unigone = st_simplify(polygon, preserveTopology = T, dTolerance = 20000)
ggplot() +
geom_sf(data = unigone,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
unigone = st_simplify(polygon, preserveTopology = T, dTolerance = 8000)
ggplot() +
geom_sf(data = unigone,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
ggplot() +
geom_sf(data = polygon,
inherit.aes = FALSE,
fill = "steelblue",
size = .1) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "#C79A46", size = 0.1) +
theme_void()+
theme(panel.background = element_rect(fill = "#9DC5CF")) +
coord_sf(xlim=c(-89.97, -41.89),ylim=c(17.32, 53.28))
#version ressérée :
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "#C79A46", size = 0.1) +
theme_void()+
theme(panel.background = element_rect(fill = "#9DC5CF")) +
coord_sf(xlim=c(-71.6923, -52.0599),ylim=c(40.6861, 52.6467))
rm(list=ls())
library(tidyverse) #manipulation de donnees
library(osmdata) #API openstreetmap
library(sf)
library(ggmap)
library(showtext) # for custom fonts
library(mapview) #pour visualisation directe, tranquilou
library(osmextract)
library(data.table) #pour selectionner des variables basees sur des mots
zone = c(-76.9, 44.6, -68.9, 50.6)
lonmin = -71.75
lonmax = -70.8
latmin = 46.5
latmax = 48.5
rivers = oe_get(
"Quebec",
quiet = FALSE,
query = "SELECT * FROM 'lines' WHERE waterway = 'river'"
)
rivers = oe_get(
"Quebec",
quiet = FALSE,
query = "SELECT * FROM 'lines' WHERE waterway = 'river'"
)
rm(list=ls())
library(tidyverse) #manipulation de donnees
library(osmdata) #API openstreetmap
library(sf)
library(ggmap)
library(showtext) # for custom fonts
library(mapview) #pour visualisation directe, tranquilou
library(osmextract)
library(data.table) #pour selectionner des variables basees sur des mots
zone = c(-76.9, 44.6, -68.9, 50.6)
lonmin = -71.75
lonmax = -70.8
latmin = 46.5
latmax = 48.5
rivers = oe_get(
"Quebec",
quiet = FALSE,
query = "SELECT * FROM 'lines' WHERE waterway = 'river'"
)
6*5
3*5
180/34
install.packages('terra', repos = 'http://rspatial.r-universe.dev')
install.packages("terra", repos = "http://rspatial.r-universe.dev")
library('terra')
setwd("~/Desktop/travail/these/analyses/CIOPS-E/data/GEOMETRY")
library(terra)
a <- rast('full_geometry_3D.nc')
library(raster)
a <- raster('full_geometry_3D.nc')
a
crs(a)
raster::crs(a)
